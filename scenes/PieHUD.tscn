[gd_scene load_steps=3 format=2]

[ext_resource path="res://models/pie.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]

script/source = "extends Control

signal pie_released(position, slice, tier)

# Pixel offsets for each tier
export var TIERS: Array = [
    62,
    100,
    142
]

# Radius of the dead zone, within which nothing can be selected.
export var DEAD_ZONE_RADIUS: int = 10

# From Î¸=0 up, a list of radial slices
const SLICES: Array = [
    \"damage\",
    \"damage-buff\",
    \"buff\",
    \"buff-health\",
    \"health\",
    \"health-curse\",
    \"curse\",
    \"curse-damage\"
]
var SLICE_RADIANS: float = (2 * PI) / SLICES.size()

var selected = null

func angle_between(n: float, a: float, b: float) -> bool:
    n = fmod(TAU + fmod(n, TAU), TAU)
    a = fmod((TAU * 10 + a), TAU)
    b = fmod((TAU * 10 + b), TAU)

    if (a < b):
        return a <= n && n <= b

    return a <= n || n <= b

func _draw() -> void:
    if selected == null:
        return

    var r: int = TIERS[selected[1] - 1]
    var theta: float = SLICES.find(selected[0]) * SLICE_RADIANS
    var cartesian: Vector2 = polar2cartesian(r, -theta)
    self.draw_circle(cartesian, 15.0, Color(1.0, 1.0, 1.0, 0.8))

func _on_PieHUD_visibility_changed() -> void:
    if visible == true:
        Engine.time_scale = 0.1
        self.rect_position = self.get_global_mouse_position()
    else:
        Engine.time_scale = 1.0
        self.warp_mouse(Vector2(0, 0))
        if selected != null:
            emit_signal(\"pie_released\", self.rect_position, selected[0], selected[1])
            selected = null

func _input(event: InputEvent) -> void:
    if Input.is_action_just_released(\"activate_pie\"):
        self.visible = false

    var cursor: Vector2 = self.get_local_mouse_position()
    var r: float = sqrt(pow(cursor.x, 2) + pow(cursor.y, 2))
    var theta: float = wrapf(atan2(-cursor.y, cursor.x), 0, TAU)

    if r <= DEAD_ZONE_RADIUS:
        selected = null
        self.update()
        return

    var tier: int = 0
    var delta: float = INF
    for i in range(0, TIERS.size()):
        var candidate_delta: float = abs(TIERS[i] - r)
        if candidate_delta < delta:
            tier = i + 1
            delta = candidate_delta

    var slice_theta: float = TAU - (SLICE_RADIANS / 2)
    var slice = null
    for candidate_slice in SLICES:
        if angle_between(theta, slice_theta, wrapf((slice_theta + SLICE_RADIANS), 0, TAU)):
            slice = candidate_slice
            break

        slice_theta = wrapf(slice_theta + SLICE_RADIANS, 0, TAU)

    if slice == null:
        selected = null
    else:
        selected = [slice, tier]
        self.update()"

[node name="PieHUD" type="Control"]
visible = false
margin_right = 283.0
margin_bottom = 283.0
script = SubResource( 1 )
DEAD_ZONE_RADIUS = 20

[node name="Pie" type="TextureRect" parent="."]
margin_left = -141.0
margin_top = -141.0
margin_right = 142.0
margin_bottom = 142.0
texture = ExtResource( 1 )
stretch_mode = 4

[connection signal="visibility_changed" from="." to="." method="_on_PieHUD_visibility_changed"]
